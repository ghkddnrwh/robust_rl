import enum
# import gym
from copy import deepcopy
import numpy as np

import matplotlib.pyplot as plt
import tensorflow as tf

import time

a = [[25.0, 21.0, 39.0, 18.0, 23.0, 16.0, 10.0, 19.0, 11.0, 12.0, 44.0, 15.0, 19.0, 17.0, 27.0, 17.0, 19.0, 24.0, 11.0, 31.0, 16.0, 32.0, 11.0, 12.0, 12.0, 15.0, 12.0, 30.0, 39.0, 40.0, 61.0, 10.0, 26.0, 13.0, 38.0, 12.0, 11.0, 12.0, 12.0, 43.0, 89.0, 16.0, 15.0, 23.0, 31.0, 16.0, 13.0, 30.0, 17.0, 11.0, 16.0, 51.0, 11.0, 13.0, 36.0, 20.0, 16.0, 29.0, 19.0, 11.0, 10.0, 43.0, 9.0, 13.0, 14.0, 15.0, 19.0, 17.0, 11.0, 17.0, 26.0, 10.0, 21.0, 14.0, 13.0, 23.0, 12.0, 39.0, 24.0, 40.0, 46.0, 27.0, 13.0, 9.0, 20.0, 12.0, 12.0, 32.0, 16.0, 22.0, 13.0, 19.0, 14.0, 27.0, 9.0, 13.0, 12.0, 15.0, 16.0, 18.0, 13.0, 15.0, 11.0, 21.0, 11.0, 16.0, 10.0, 24.0, 11.0, 11.0, 20.0, 10.0, 15.0, 11.0, 39.0, 37.0, 22.0, 19.0, 9.0, 15.0, 25.0, 28.0, 12.0, 12.0, 19.0, 32.0, 22.0, 27.0, 15.0, 18.0, 33.0, 41.0, 22.0, 11.0, 22.0, 51.0, 28.0, 32.0, 49.0, 13.0, 26.0, 50.0, 40.0, 54.0, 40.0, 22.0, 44.0, 42.0, 35.0, 21.0, 25.0, 38.0, 39.0, 66.0, 78.0, 23.0, 49.0, 63.0, 23.0, 31.0, 26.0, 64.0, 83.0, 18.0, 73.0, 47.0, 68.0, 42.0, 17.0, 26.0, 44.0, 47.0, 48.0, 95.0, 30.0, 168.0, 49.0, 108.0, 44.0, 70.0, 65.0, 52.0, 69.0, 39.0, 44.0, 69.0, 80.0, 67.0, 77.0, 93.0, 79.0, 55.0, 63.0, 112.0, 74.0, 58.0, 83.0, 111.0, 121.0, 185.0, 213.0, 134.0, 138.0, 184.0, 142.0, 255.0, 169.0, 393.0, 367.0, 283.0, 121.0, 361.0, 225.0, 235.0, 194.0, 183.0, 201.0, 295.0, 174.0, 260.0, 300.0, 210.0, 159.0, 135.0, 197.0, 381.0, 214.0, 227.0, 180.0, 199.0, 483.0, 311.0, 239.0, 349.0, 341.0, 379.0, 337.0, 181.0, 376.0, 251.0, 336.0, 326.0, 336.0, 249.0, 158.0, 500.0, 318.0, 289.0, 447.0, 388.0, 224.0, 303.0, 305.0, 260.0, 263.0, 198.0, 258.0, 210.0, 288.0, 239.0, 413.0, 500.0, 275.0, 500.0, 238.0, 255.0, 500.0, 183.0, 258.0, 257.0, 294.0, 500.0, 500.0, 500.0, 500.0, 500.0, 290.0, 394.0, 393.0, 500.0, 365.0, 305.0, 500.0, 500.0, 440.0, 355.0, 500.0, 369.0, 469.0, 359.0, 500.0, 500.0, 500.0, 443.0, 500.0, 454.0, 500.0, 341.0, 500.0, 500.0, 282.0, 223.0, 439.0, 500.0, 211.0, 500.0, 487.0, 500.0, 386.0, 425.0, 500.0, 408.0, 500.0, 500.0, 500.0, 500.0, 480.0, 219.0, 362.0, 341.0, 335.0, 233.0, 239.0, 220.0, 379.0, 297.0, 387.0, 363.0, 308.0, 279.0, 458.0, 346.0, 227.0, 315.0, 500.0, 220.0, 500.0, 121.0, 216.0, 420.0, 315.0, 364.0, 284.0, 444.0, 424.0, 339.0, 228.0, 500.0, 351.0, 325.0, 162.0, 193.0, 257.0, 288.0, 285.0, 272.0, 163.0, 231.0, 304.0, 500.0, 323.0, 237.0, 384.0, 293.0, 254.0, 387.0, 483.0, 500.0, 304.0, 343.0, 404.0, 283.0, 349.0, 355.0, 263.0, 230.0, 144.0, 257.0, 221.0, 173.0, 202.0, 201.0, 134.0, 162.0, 163.0, 157.0, 157.0, 138.0, 159.0, 201.0, 129.0, 192.0, 151.0, 190.0, 169.0, 168.0, 164.0, 158.0, 154.0, 167.0, 163.0, 161.0, 116.0, 161.0, 141.0, 149.0, 142.0, 187.0, 194.0, 144.0, 225.0, 163.0, 169.0, 143.0, 173.0, 160.0, 176.0, 119.0, 211.0, 134.0, 128.0, 104.0, 142.0, 127.0, 128.0, 117.0, 114.0, 99.0, 126.0, 125.0, 134.0, 159.0, 144.0, 102.0, 204.0, 153.0, 149.0, 152.0, 148.0, 181.0, 230.0, 139.0, 125.0, 150.0, 169.0, 169.0, 154.0, 170.0, 166.0, 215.0, 252.0, 131.0, 200.0, 240.0, 229.0, 176.0, 232.0, 486.0, 242.0, 249.0, 416.0, 202.0, 225.0, 296.0, 351.0, 379.0, 285.0, 421.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 490.0, 500.0, 500.0, 500.0, 401.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 435.0, 423.0, 500.0, 500.0, 271.0, 500.0, 500.0, 500.0, 500.0, 500.0], [14.0, 14.0, 21.0, 18.0, 18.0, 29.0, 23.0, 15.0, 16.0, 43.0, 14.0, 11.0, 13.0, 31.0, 19.0, 13.0, 20.0, 8.0, 29.0, 14.0, 10.0, 19.0, 21.0, 14.0, 14.0, 24.0, 17.0, 18.0, 37.0, 29.0, 11.0, 14.0, 9.0, 22.0, 14.0, 21.0, 56.0, 28.0, 19.0, 72.0, 24.0, 18.0, 16.0, 24.0, 15.0, 15.0, 31.0, 13.0, 9.0, 26.0, 27.0, 19.0, 21.0, 29.0, 29.0, 14.0, 10.0, 12.0, 10.0, 33.0, 19.0, 12.0, 25.0, 14.0, 56.0, 14.0, 13.0, 23.0, 16.0, 9.0, 14.0, 17.0, 19.0, 35.0, 16.0, 11.0, 41.0, 12.0, 10.0, 23.0, 27.0, 47.0, 29.0, 13.0, 18.0, 28.0, 13.0, 25.0, 36.0, 15.0, 25.0, 28.0, 39.0, 28.0, 19.0, 18.0, 22.0, 28.0, 38.0, 21.0, 15.0, 14.0, 45.0, 45.0, 15.0, 17.0, 16.0, 56.0, 34.0, 41.0, 20.0, 30.0, 16.0, 18.0, 58.0, 21.0, 23.0, 37.0, 12.0, 34.0, 17.0, 14.0, 28.0, 26.0, 11.0, 26.0, 54.0, 18.0, 23.0, 10.0, 43.0, 20.0, 26.0, 25.0, 46.0, 26.0, 44.0, 65.0, 44.0, 50.0, 35.0, 38.0, 16.0, 49.0, 66.0, 88.0, 48.0, 49.0, 27.0, 9.0, 21.0, 22.0, 83.0, 71.0, 50.0, 72.0, 35.0, 60.0, 41.0, 86.0, 66.0, 85.0, 29.0, 84.0, 109.0, 107.0, 39.0, 32.0, 61.0, 160.0, 93.0, 103.0, 105.0, 66.0, 85.0, 75.0, 181.0, 111.0, 130.0, 153.0, 415.0, 303.0, 222.0, 226.0, 97.0, 156.0, 196.0, 265.0, 234.0, 273.0, 230.0, 492.0, 305.0, 431.0, 349.0, 426.0, 253.0, 221.0, 266.0, 328.0, 348.0, 188.0, 307.0, 240.0, 260.0, 213.0, 256.0, 298.0, 500.0, 336.0, 293.0, 293.0, 409.0, 397.0, 280.0, 284.0, 373.0, 364.0, 158.0, 318.0, 314.0, 416.0, 168.0, 218.0, 182.0, 212.0, 217.0, 500.0, 291.0, 178.0, 290.0, 291.0, 193.0, 240.0, 194.0, 319.0, 330.0, 380.0, 314.0, 500.0, 285.0, 327.0, 267.0, 304.0, 305.0, 389.0, 322.0, 391.0, 405.0, 313.0, 411.0, 500.0, 441.0, 388.0, 274.0, 473.0, 284.0, 310.0, 468.0, 424.0, 500.0, 500.0, 442.0, 282.0, 285.0, 270.0, 500.0, 400.0, 363.0, 413.0, 500.0, 490.0, 500.0, 500.0, 500.0, 495.0, 500.0, 494.0, 500.0, 416.0, 273.0, 292.0, 303.0, 353.0, 351.0, 417.0, 358.0, 259.0, 363.0, 294.0, 284.0, 390.0, 500.0, 486.0, 375.0, 319.0, 272.0, 312.0, 269.0, 231.0, 288.0, 224.0, 248.0, 263.0, 357.0, 248.0, 175.0, 239.0, 274.0, 139.0, 209.0, 59.0, 136.0, 194.0, 233.0, 219.0, 273.0, 299.0, 425.0, 500.0, 350.0, 348.0, 304.0, 500.0, 500.0, 500.0, 500.0, 471.0, 500.0, 500.0, 500.0, 500.0, 310.0, 500.0, 500.0, 500.0, 404.0, 500.0, 302.0, 307.0, 500.0, 500.0, 500.0, 327.0, 500.0, 496.0, 500.0, 500.0, 500.0, 466.0, 500.0, 500.0, 500.0, 500.0, 189.0, 500.0, 500.0, 328.0, 500.0, 450.0, 406.0, 321.0, 296.0, 336.0, 288.0, 228.0, 283.0, 286.0, 212.0, 297.0, 201.0, 291.0, 270.0, 308.0, 225.0, 235.0, 242.0, 297.0, 456.0, 321.0, 264.0, 213.0, 149.0, 241.0, 163.0, 193.0, 208.0, 159.0, 153.0, 201.0, 199.0, 208.0, 264.0, 194.0, 243.0, 262.0, 139.0, 188.0, 307.0, 304.0, 340.0, 271.0, 484.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 470.0, 500.0, 500.0, 500.0, 500.0, 500.0, 496.0, 337.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 357.0, 500.0, 500.0, 500.0, 496.0, 500.0, 500.0, 270.0, 500.0, 190.0, 492.0, 500.0, 500.0, 500.0, 317.0, 396.0, 238.0, 247.0, 283.0, 287.0, 285.0, 195.0, 268.0, 298.0, 196.0, 138.0, 162.0, 244.0, 317.0, 267.0, 240.0, 260.0, 191.0, 234.0, 227.0, 203.0, 324.0, 279.0, 283.0, 236.0, 262.0, 500.0, 461.0, 500.0, 500.0, 420.0, 500.0, 500.0, 500.0, 427.0, 391.0, 492.0, 483.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 406.0, 422.0, 306.0, 500.0, 500.0, 500.0], [24.0, 12.0, 22.0, 8.0, 21.0, 22.0, 21.0, 10.0, 26.0, 53.0, 13.0, 22.0, 18.0, 18.0, 12.0, 24.0, 10.0, 12.0, 23.0, 27.0, 17.0, 22.0, 25.0, 21.0, 22.0, 23.0, 12.0, 88.0, 22.0, 47.0, 23.0, 23.0, 14.0, 19.0, 11.0, 25.0, 23.0, 20.0, 18.0, 21.0, 30.0, 29.0, 55.0, 18.0, 62.0, 13.0, 18.0, 37.0, 30.0, 63.0, 28.0, 31.0, 29.0, 19.0, 19.0, 43.0, 55.0, 27.0, 34.0, 31.0, 12.0, 33.0, 24.0, 11.0, 23.0, 27.0, 20.0, 18.0, 15.0, 10.0, 26.0, 19.0, 29.0, 14.0, 23.0, 15.0, 18.0, 11.0, 20.0, 75.0, 15.0, 23.0, 18.0, 15.0, 37.0, 26.0, 49.0, 15.0, 39.0, 36.0, 27.0, 46.0, 25.0, 48.0, 34.0, 16.0, 23.0, 16.0, 35.0, 20.0, 12.0, 88.0, 26.0, 20.0, 43.0, 39.0, 16.0, 15.0, 38.0, 83.0, 55.0, 65.0, 16.0, 52.0, 30.0, 40.0, 52.0, 91.0, 13.0, 61.0, 41.0, 25.0, 83.0, 63.0, 29.0, 121.0, 63.0, 27.0, 91.0, 61.0, 78.0, 95.0, 52.0, 45.0, 124.0, 36.0, 29.0, 48.0, 62.0, 62.0, 45.0, 78.0, 42.0, 82.0, 81.0, 111.0, 66.0, 64.0, 58.0, 90.0, 63.0, 92.0, 201.0, 150.0, 420.0, 381.0, 289.0, 280.0, 156.0, 261.0, 190.0, 278.0, 243.0, 328.0, 230.0, 235.0, 177.0, 158.0, 160.0, 162.0, 55.0, 223.0, 268.0, 173.0, 275.0, 366.0, 184.0, 203.0, 155.0, 220.0, 335.0, 414.0, 500.0, 196.0, 301.0, 500.0, 478.0, 376.0, 500.0, 500.0, 187.0, 387.0, 474.0, 500.0, 500.0, 396.0, 500.0, 336.0, 500.0, 500.0, 353.0, 500.0, 304.0, 500.0, 394.0, 500.0, 500.0, 433.0, 500.0, 500.0, 500.0, 336.0, 500.0, 402.0, 500.0, 500.0, 500.0, 500.0, 311.0, 496.0, 500.0, 500.0, 500.0, 500.0, 309.0, 462.0, 500.0, 469.0, 500.0, 500.0, 235.0, 272.0, 477.0, 500.0, 500.0, 500.0, 367.0, 317.0, 308.0, 231.0, 326.0, 337.0, 217.0, 225.0, 500.0, 252.0, 500.0, 257.0, 252.0, 394.0, 294.0, 406.0, 404.0, 350.0, 386.0, 281.0, 500.0, 309.0, 367.0, 314.0, 281.0, 457.0, 414.0, 412.0, 418.0, 500.0, 500.0, 500.0, 500.0, 463.0, 500.0, 479.0, 458.0, 265.0, 464.0, 300.0, 246.0, 268.0, 500.0, 258.0, 223.0, 325.0, 431.0, 500.0, 500.0, 403.0, 336.0, 491.0, 490.0, 380.0, 476.0, 349.0, 290.0, 297.0, 298.0, 440.0, 330.0, 385.0, 281.0, 294.0, 481.0, 309.0, 233.0, 312.0, 263.0, 316.0, 289.0, 420.0, 342.0, 475.0, 342.0, 490.0, 500.0, 276.0, 500.0, 500.0, 153.0, 500.0, 500.0, 500.0, 500.0, 494.0, 500.0, 500.0, 500.0, 240.0, 491.0, 500.0, 234.0, 500.0, 500.0, 230.0, 359.0, 500.0, 500.0, 447.0, 367.0, 500.0, 500.0, 500.0, 500.0, 441.0, 500.0, 252.0, 147.0, 500.0, 500.0, 500.0, 265.0, 500.0, 500.0, 327.0, 500.0, 305.0, 244.0, 301.0, 500.0, 421.0, 338.0, 178.0, 230.0, 367.0, 410.0, 347.0, 199.0, 126.0, 319.0, 181.0, 306.0, 413.0, 287.0, 310.0, 334.0, 489.0, 274.0, 278.0, 414.0, 116.0, 347.0, 410.0, 404.0, 416.0, 305.0, 460.0, 500.0, 306.0, 426.0, 396.0, 373.0, 369.0, 262.0, 302.0, 442.0, 368.0, 137.0, 326.0, 354.0, 400.0, 313.0, 333.0, 306.0, 224.0, 382.0, 500.0, 500.0, 414.0, 500.0, 370.0, 500.0, 500.0, 500.0, 500.0, 262.0, 500.0, 500.0, 340.0, 500.0, 500.0, 500.0, 500.0, 500.0, 413.0, 500.0, 429.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 415.0, 496.0, 323.0, 299.0, 273.0, 267.0, 319.0, 415.0, 429.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0]]
a = np.array(a)
plt.plot(a[0])
plt.plot(a[1])
plt.plot(a[2])
plt.show()

# zero = 0
# one = 0

# logits = [[10.0, 1.0]]
# logits = np.array(logits)
# for i in range(10000):
#     action = tf.random.categorical(logits, 1)
#     if action == 0:
#         zero+=1
#     else:
#         one+=1

# print(zero / (zero + one))
# print(np.array(action)[0, 0])
# print(action)

# env_name = 'CartPole-v1'
# env = gym.make(env_name)
# seed = 1

# state_record = []
# pess_state_record = []

# # pess_env = deepcopy(env)
# pess_env = gym.make(env_name)

# env.reset(seed = seed)
# for i in range(10):
#     state, _, _, _, _ = env.step(0)
#     state_record.append(state)

# env.reset(seed = seed)
# for i in range(10):
#     print(state[0])
#     pess_env.reset()
#     exact_state = env.get_exact_state()
#     pess_env.set_state(exact_state)
#     # env.set_state(exact_state)
#     state, _, _, _, _ = env.step(0)
#     exact_state1 = env.get_exact_state()
#     pess_state, _, _, _, _ = pess_env.step(1)
#     exact_state2 = env.get_exact_state()

#     if(exact_state1 != exact_state2):
#         print("Something Wrong")


#     if(state[0] == pess_state[0]):
#         print("Same State")
#     else:
#         print("Different State")


#     pess_state_record.append(state)

# # print(state_record)
# # print(pess_state_record)
# state_record = np.array(state_record)
# pess_state_record = np.array(pess_state_record)
# if(state_record == pess_state_record).all():
#     print("Same")
# else:
#     print("Different")



# state_same_count = [0, 0, 0, 0, 0, 0]
# same_count = 0
# reward_same_count = 0


# for i in range(10000):
#     env.reset(seed = i)
#     env.step(1)
#     env.step(1)
#     env.step(1)
#     next_state, reward, _, _, _ = env.step(0)
#     env.reset(seed = i)
#     env.step(1)
#     env.step(1)
#     env.step(1)
#     new_next_state, new_reward, _, _, _ = env.step(1)

#     if(next_state == new_next_state).all():
#         same_count += 1
#     if next_state[0] == new_next_state[0]:
#         state_same_count[0] += 1
#     if next_state[1] == new_next_state[1]:
#         state_same_count[1] += 1
#     if next_state[2] == new_next_state[2]:
#         state_same_count[2] += 1
#     if next_state[3] == new_next_state[3]:
#         state_same_count[3] += 1
#     # if next_state[4] == new_next_state[4]:
#     #     state_same_count[4] += 1
#     # if next_state[5] == new_next_state[5]:
#     #     state_same_count[5] += 1
#     if reward == new_reward:
#         reward_same_count += 1

# print(state_same_count)
# print(same_count)
# print(reward_same_count)






# env.seed(0)
# env.reset(seed = 0)

# print(env.get_exact_state())


# print(env.get_exact_state())

# print(next_state)

# print(env.action_space.sample())
# pess_env = gym.make(env_name)

# state, _ = env.reset()
# pess_env.reset()
# print(state)

# step = 0


# while(True):
#     exact_state = env.get_exact_state()
#     print("Exact State : ",exact_state)
#     pess_env.set_state(exact_state)

#     action = env.action_space.sample()
#     # env.render()
#     next_state, _, done, truncated, _ = env.step(action)
#     pess_next_state, _, _, _, _ = pess_env.step(action)

#     if np.mean((pess_next_state - next_state)**2) < 0.01:
#         print("step : ", step + 1)
#         # print("State : ", next_state)
#     else:
#         print("Not equal")
#         print("State : ", next_state)
#         print("Pess State : ", pess_next_state)
#         while(True):
#             x = 1

#     if done or truncated:
#         print("RESET")
#         state, _ = env.reset()
#         step = 0
#     else:
#         state = next_state
#         step += 1
    # print("Current State : ", state)
    # print("Action : ", action)
    # print("State : ", next_state)
    # print("Pess State : ", pess_next_state)
    # state = next_state
    # step += 1
    # time.sleep(1)

    # break
    